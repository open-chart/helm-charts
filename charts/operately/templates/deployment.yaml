apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "operately.fullname" . }}
  labels:
    {{- include "operately.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "operately.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "operately.selectorLabels" . | nindent 8 }}
    spec:
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup }}
        fsGroupChangePolicy: {{ .Values.podSecurityContext.fsGroupChangePolicy | quote }}
      {{- end }}
      {{- if .Values.mediaVolume.fixPermissions }}
      initContainers:
        - name: fix-media-permissions
          image: busybox:1.36
          command: ["sh","-c","mkdir -p {{ .Values.persistence.mountPath }} {{ .Values.persistence.mountPath }}/certs && chown -R 65534:65534 {{ .Values.persistence.mountPath }} && chmod -R 0775 {{ .Values.persistence.mountPath }}"]
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: media
              mountPath: {{ .Values.persistence.mountPath }}
      {{- end }}
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.imagePullSecrets | nindent 8 }}
      {{- end }}
      containers:
        - name: operately
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.securityContext.enabled }}
          securityContext:
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: {{ include "operately.fullname" . }}
          env:
            - name: SECRET_KEY_BASE
              value: {{ required "Provide .Values.secrets.secretKeyBase" (tpl .Values.secrets.secretKeyBase .) | quote }}
            - name: OPERATELY_BLOB_TOKEN_SECRET_KEY
              value: {{ required "Provide .Values.secrets.blobTokenSecretKey" (tpl .Values.secrets.blobTokenSecretKey .) | quote }}
            - name: DATABASE_URL
              value: {{ required "Database must be configured via externalPostgresql or postgresql.enabled" (include "operately.database.url" .) | quote }}
            {{- range .Values.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            {{- range .Values.extraSecretEnv }}
            - name: {{ .name }}
              valueFrom:
                secretKeyRef:
                  name: {{ default (include "operately.fullname" $) $.Values.secrets.name }}
                  key: {{ .key }}
            {{- end }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: media
              mountPath: {{ .Values.persistence.mountPath }}
            {{- else }}
            - name: media
              mountPath: {{ .Values.persistence.mountPath }}
            {{- end }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 6
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        {{- if .Values.persistence.enabled }}
        - name: media
          persistentVolumeClaim:
            claimName: {{ include "operately.fullname" . }}-media
        {{- else }}
        - name: media
          emptyDir: {}
        {{- end }}
